services:
  pg16:
    restart: always
    image: postgres:16.4-alpine3.20
    hostname: mst-pg16
    shm_size: 256mb
    networks:
      - internal
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - ./pg16data:/var/lib/postgresql/data
      - ./postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    environment:
      - 'POSTGRES_PASSWORD=langua' # You may replace this password with your one.

  redis:
    restart: always
    image: redis:7.4.1-alpine3.20
    hostname: mst-redis
    networks:
      - internal
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis7data:/data

  esearch:
    restart: always
    image: elasticsearch:8.15.3
    hostname: mst-esearch
    environment:
      - "ES_JAVA_OPTS=-Xms4096m -Xmx4096m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
      - ./es8data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  web:
    restart: always
    image: tootsuite/mastodon:v4.3.0-yai
    hostname: mst-web
    env_file: env_settings
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - internal
    healthcheck:
      test:  ['CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"]
    depends_on:
      - pg16
      - redis
      - esearch
      - sidekiq
      - streaming
    volumes:
      - ./tootdata/system:/mastodon/public/system

  sidekiq:
    restart: always
    image: tootsuite/mastodon:v4.3.0-yai
    hostname: mst-sidekiq
    env_file: env_settings
    command: bundle exec sidekiq
    networks:
      - internal
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    depends_on:
      - pg16
      - redis
    volumes:
      - ./tootdata/system:/mastodon/public/system

  streaming:
    restart: always
    image: tootsuite/mastodon-streaming:v4.3.0-yai
    hostname: mst-streaming
    env_file: env_settings
    command: node ./streaming/index.js
    networks:
      - internal
    healthcheck:
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    depends_on:
      - pg16
      - redis

networks:
  internal:
    # setup network shared between docker composers as this post:
    # https://stackoverflow.com/questions/38088279/communication-between-multiple-docker-compose-projects      
    name: mastodon-internal
    external: true
